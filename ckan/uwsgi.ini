[uwsgi]
; Make sure all options in this file exist.
strict = true
plugin = http,python
socket = /tmp/uwsgi.sock

wsgi-file = /srv/app/wsgi.py
module = wsgi:application
need-app = true

uid = 92
gid = 92
http = 0.0.0.0:5000
master = true
enable-threads = true
lazy-apps = true
vacuum = true
processes = 4
buffer-size = 32768

single-interpreter = true            ; only a single interpreter is required with the same app
die-on-term = true                   ; docker should be able to gracefully kill uwsgi (die on SIGTERM instead of SIGQUIT)

; enable some recycling
max-requests = 1000                  ; Restart workers after this many requests
max-worker-lifetime = 7200           ; Restart workers after this many seconds
worker-reload-mercy = 3600           ; How long to wait before forcefully killing workers
harakiri = 7200                      ; forcefully stop worker after N seconds (it's high because of large files)

; Enable post-buffering - not sure exactly how it works, but it avoids
; unexpected closing of the connection by nginx during upload.
post-buffering = 2048

; If we don't want to cache the files that users want to download
; (i.e. set `proxy_max_temp_file_size 0;` in nginx), then we have to set
http-timeout = 7200
socket-timeout = 7200
; (Note that we are serving CKAN via http11-socket behind nginx).
; Otherwise, downloads will fail with `uwsgi_response_sendfile_do() TIMEOUT !!!`,
; because the client cannot download the file from nginx as fast as
; uWSGI can send the file to nginx. But in this case, we can really only
; have as many connections as we have workers.
; On the other hand, if we, set `proxy_max_temp_file_size 100000m;`
; in nginx, then all downloads will be cached by nginx. And nginx will
; handle all users. The purpose of setting `workers` to `4` in uWSGI
; is now only so that CKAN does not block for as long as it takes the
; system to copy the download from uwsgi to nginx's `proxy_temp_path`.
; In other words, CKAN will only be unresponsive if 4 downloads are
; started at the same time for as long as it takes the smallest download
; to be copied over the http socket from uWSGI to nginx.
; Good to know: nginx also caches uploads, so no uWSGI worker is
; blocked *during* an upload.